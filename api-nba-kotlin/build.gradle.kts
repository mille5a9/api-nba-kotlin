/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */
val ktorVersion: String by project
val ossrhUsername: String by project
val ossrhPassword: String by project

group = "io.github.mille5a9"
version = "1.0.4-alpha"
description = "Unofficial wrapper for the API-SPORTS NBA API"

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)

    // Apply the java-library plugin for API and implementation separation.
    `java-library`

    kotlin("plugin.serialization") version "1.9.21"
    id("org.jetbrains.dokka") version "1.9.10"

    // Apply the Maven Publish plugin to add support for publishing via Maven.
    `maven-publish`
    signing
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)

    api("io.ktor:ktor-client-core:$ktorVersion")
    implementation("io.ktor:ktor-serialization-gson:$ktorVersion")
    implementation("io.ktor:ktor-client-cio:$ktorVersion")
    implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")

    testImplementation("io.ktor:ktor-client-mock:$ktorVersion")
}

testing {
    suites {
        // Configure the built-in test suite
        @Suppress("UnstableApiUsage") val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("1.9.20")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

java {
    withJavadocJar()
}

val sourcesJar by tasks.registering(Jar::class) {
    from(sourceSets.main.get().allSource)
    archiveClassifier.set("sources")
}

afterEvaluate {
    tasks.getByName("generateMetadataFileForMavenJavaPublication") {
        dependsOn(sourcesJar)
    }
}

publishing {
    repositories {
        maven {
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
    publications {
        register("mavenJava", MavenPublication::class) {
            from(components["java"])
            artifact(sourcesJar.get())
            pom {
                name.set("api-nba-kotlin")
                description.set("Unofficial wrapper for the API-SPORTS NBA API")
                url.set("https://github.com/mille5a9/api-sports-kotlin")
                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }
                developers {
                    developer {
                        id.set("mille5a9")
                        name.set("Andrew Miller")
                        email.set("atmiller192@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:https://github.com/mille5a9/api-sports-kotlin.git")
                    developerConnection.set("scm:git:https://github.com/mille5a9/api-sports-kotlin.git")
                    url.set("https://github.com/mille5a9/api-sports-kotlin")
                }
            }
        }
    }
}

signing {
    sign(publishing.publications["mavenJava"])
    val keyId: String by project
    val secretKeyRingFile: String by project
}
